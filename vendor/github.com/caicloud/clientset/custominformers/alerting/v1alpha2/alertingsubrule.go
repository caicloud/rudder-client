/*
Copyright 2020 caicloud authors. All rights reserved.
*/

// Code generated by informer-gen. DO NOT EDIT.

package v1alpha2

import (
	time "time"

	customclient "github.com/caicloud/clientset/customclient"
	internalinterfaces "github.com/caicloud/clientset/custominformers/internalinterfaces"
	v1alpha2 "github.com/caicloud/clientset/listers/alerting/v1alpha2"
	alertingv1alpha2 "github.com/caicloud/clientset/pkg/apis/alerting/v1alpha2"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// AlertingSubRuleInformer provides access to a shared informer and lister for
// AlertingSubRules.
type AlertingSubRuleInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha2.AlertingSubRuleLister
}

type alertingSubRuleInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewAlertingSubRuleInformer constructs a new informer for AlertingSubRule type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewAlertingSubRuleInformer(client customclient.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredAlertingSubRuleInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredAlertingSubRuleInformer constructs a new informer for AlertingSubRule type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredAlertingSubRuleInformer(client customclient.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.AlertingV1alpha2().AlertingSubRules().List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.AlertingV1alpha2().AlertingSubRules().Watch(options)
			},
		},
		&alertingv1alpha2.AlertingSubRule{},
		resyncPeriod,
		indexers,
	)
}

func (f *alertingSubRuleInformer) defaultInformer(client customclient.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredAlertingSubRuleInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *alertingSubRuleInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&alertingv1alpha2.AlertingSubRule{}, f.defaultInformer)
}

func (f *alertingSubRuleInformer) Lister() v1alpha2.AlertingSubRuleLister {
	return v1alpha2.NewAlertingSubRuleLister(f.Informer().GetIndexer())
}
