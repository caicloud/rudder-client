/*
Copyright 2020 caicloud authors. All rights reserved.
*/

// Code generated by informer-gen. DO NOT EDIT.

package custominformers

import (
	reflect "reflect"
	sync "sync"
	time "time"

	customclient "github.com/caicloud/clientset/customclient"
	alerting "github.com/caicloud/clientset/custominformers/alerting"
	apiregistration "github.com/caicloud/clientset/custominformers/apiregistration"
	clever "github.com/caicloud/clientset/custominformers/clever"
	cnetworking "github.com/caicloud/clientset/custominformers/cnetworking"
	config "github.com/caicloud/clientset/custominformers/config"
	dataset "github.com/caicloud/clientset/custominformers/dataset"
	devops "github.com/caicloud/clientset/custominformers/devops"
	evaluation "github.com/caicloud/clientset/custominformers/evaluation"
	internalinterfaces "github.com/caicloud/clientset/custominformers/internalinterfaces"
	loadbalance "github.com/caicloud/clientset/custominformers/loadbalance"
	logging "github.com/caicloud/clientset/custominformers/logging"
	microservice "github.com/caicloud/clientset/custominformers/microservice"
	model "github.com/caicloud/clientset/custominformers/model"
	orchestration "github.com/caicloud/clientset/custominformers/orchestration"
	release "github.com/caicloud/clientset/custominformers/release"
	resource "github.com/caicloud/clientset/custominformers/resource"
	servicemesh "github.com/caicloud/clientset/custominformers/servicemesh"
	serving "github.com/caicloud/clientset/custominformers/serving"
	tenant "github.com/caicloud/clientset/custominformers/tenant"
	workload "github.com/caicloud/clientset/custominformers/workload"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	cache "k8s.io/client-go/tools/cache"
)

// SharedInformerOption defines the functional option type for SharedInformerFactory.
type SharedInformerOption func(*sharedInformerFactory) *sharedInformerFactory

type sharedInformerFactory struct {
	client           customclient.Interface
	namespace        string
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	lock             sync.Mutex
	defaultResync    time.Duration
	customResync     map[reflect.Type]time.Duration

	informers map[reflect.Type]cache.SharedIndexInformer
	// startedInformers is used for tracking which informers have been started.
	// This allows Start() to be called multiple times safely.
	startedInformers map[reflect.Type]bool
}

// WithCustomResyncConfig sets a custom resync period for the specified informer types.
func WithCustomResyncConfig(resyncConfig map[v1.Object]time.Duration) SharedInformerOption {
	return func(factory *sharedInformerFactory) *sharedInformerFactory {
		for k, v := range resyncConfig {
			factory.customResync[reflect.TypeOf(k)] = v
		}
		return factory
	}
}

// WithTweakListOptions sets a custom filter on all listers of the configured SharedInformerFactory.
func WithTweakListOptions(tweakListOptions internalinterfaces.TweakListOptionsFunc) SharedInformerOption {
	return func(factory *sharedInformerFactory) *sharedInformerFactory {
		factory.tweakListOptions = tweakListOptions
		return factory
	}
}

// WithNamespace limits the SharedInformerFactory to the specified namespace.
func WithNamespace(namespace string) SharedInformerOption {
	return func(factory *sharedInformerFactory) *sharedInformerFactory {
		factory.namespace = namespace
		return factory
	}
}

// NewSharedInformerFactory constructs a new instance of sharedInformerFactory for all namespaces.
func NewSharedInformerFactory(client customclient.Interface, defaultResync time.Duration) SharedInformerFactory {
	return NewSharedInformerFactoryWithOptions(client, defaultResync)
}

// NewFilteredSharedInformerFactory constructs a new instance of sharedInformerFactory.
// Listers obtained via this SharedInformerFactory will be subject to the same filters
// as specified here.
// Deprecated: Please use NewSharedInformerFactoryWithOptions instead
func NewFilteredSharedInformerFactory(client customclient.Interface, defaultResync time.Duration, namespace string, tweakListOptions internalinterfaces.TweakListOptionsFunc) SharedInformerFactory {
	return NewSharedInformerFactoryWithOptions(client, defaultResync, WithNamespace(namespace), WithTweakListOptions(tweakListOptions))
}

// NewSharedInformerFactoryWithOptions constructs a new instance of a SharedInformerFactory with additional options.
func NewSharedInformerFactoryWithOptions(client customclient.Interface, defaultResync time.Duration, options ...SharedInformerOption) SharedInformerFactory {
	factory := &sharedInformerFactory{
		client:           client,
		namespace:        v1.NamespaceAll,
		defaultResync:    defaultResync,
		informers:        make(map[reflect.Type]cache.SharedIndexInformer),
		startedInformers: make(map[reflect.Type]bool),
		customResync:     make(map[reflect.Type]time.Duration),
	}

	// Apply all options
	for _, opt := range options {
		factory = opt(factory)
	}

	return factory
}

// Start initializes all requested informers.
func (f *sharedInformerFactory) Start(stopCh <-chan struct{}) {
	f.lock.Lock()
	defer f.lock.Unlock()

	for informerType, informer := range f.informers {
		if !f.startedInformers[informerType] {
			go informer.Run(stopCh)
			f.startedInformers[informerType] = true
		}
	}
}

// WaitForCacheSync waits for all started informers' cache were synced.
func (f *sharedInformerFactory) WaitForCacheSync(stopCh <-chan struct{}) map[reflect.Type]bool {
	informers := func() map[reflect.Type]cache.SharedIndexInformer {
		f.lock.Lock()
		defer f.lock.Unlock()

		informers := map[reflect.Type]cache.SharedIndexInformer{}
		for informerType, informer := range f.informers {
			if f.startedInformers[informerType] {
				informers[informerType] = informer
			}
		}
		return informers
	}()

	res := map[reflect.Type]bool{}
	for informType, informer := range informers {
		res[informType] = cache.WaitForCacheSync(stopCh, informer.HasSynced)
	}
	return res
}

// InternalInformerFor returns the SharedIndexInformer for obj using an internal
// client.
func (f *sharedInformerFactory) InformerFor(obj runtime.Object, newFunc internalinterfaces.NewInformerFunc) cache.SharedIndexInformer {
	f.lock.Lock()
	defer f.lock.Unlock()

	informerType := reflect.TypeOf(obj)
	informer, exists := f.informers[informerType]
	if exists {
		return informer
	}

	resyncPeriod, exists := f.customResync[informerType]
	if !exists {
		resyncPeriod = f.defaultResync
	}

	informer = newFunc(f.client, resyncPeriod)
	f.informers[informerType] = informer

	return informer
}

// SharedInformerFactory provides shared informers for resources in all known
// API group versions.
type SharedInformerFactory interface {
	internalinterfaces.SharedInformerFactory
	ForResource(resource schema.GroupVersionResource) (GenericInformer, error)
	WaitForCacheSync(stopCh <-chan struct{}) map[reflect.Type]bool

	Alerting() alerting.Interface
	Apiregistration() apiregistration.Interface
	Clever() clever.Interface
	Cnetworking() cnetworking.Interface
	Config() config.Interface
	Dataset() dataset.Interface
	Devops() devops.Interface
	Evaluation() evaluation.Interface
	Loadbalance() loadbalance.Interface
	Logging() logging.Interface
	Microservice() microservice.Interface
	Model() model.Interface
	Orchestration() orchestration.Interface
	Release() release.Interface
	Resource() resource.Interface
	Servicemesh() servicemesh.Interface
	Serving() serving.Interface
	Tenant() tenant.Interface
	Workload() workload.Interface
}

func (f *sharedInformerFactory) Alerting() alerting.Interface {
	return alerting.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Apiregistration() apiregistration.Interface {
	return apiregistration.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Clever() clever.Interface {
	return clever.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Cnetworking() cnetworking.Interface {
	return cnetworking.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Config() config.Interface {
	return config.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Dataset() dataset.Interface {
	return dataset.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Devops() devops.Interface {
	return devops.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Evaluation() evaluation.Interface {
	return evaluation.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Loadbalance() loadbalance.Interface {
	return loadbalance.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Logging() logging.Interface {
	return logging.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Microservice() microservice.Interface {
	return microservice.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Model() model.Interface {
	return model.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Orchestration() orchestration.Interface {
	return orchestration.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Release() release.Interface {
	return release.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Resource() resource.Interface {
	return resource.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Servicemesh() servicemesh.Interface {
	return servicemesh.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Serving() serving.Interface {
	return serving.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Tenant() tenant.Interface {
	return tenant.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Workload() workload.Interface {
	return workload.New(f, f.namespace, f.tweakListOptions)
}
