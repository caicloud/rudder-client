/*
Copyright 2020 caicloud authors. All rights reserved.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"time"

	scheme "github.com/caicloud/clientset/customclient/scheme"
	v1 "github.com/caicloud/clientset/pkg/apis/devops/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// CargosGetter has a method to return a CargoInterface.
// A group's client should implement this interface.
type CargosGetter interface {
	Cargos() CargoInterface
}

// CargoInterface has methods to work with Cargo resources.
type CargoInterface interface {
	Create(*v1.Cargo) (*v1.Cargo, error)
	Update(*v1.Cargo) (*v1.Cargo, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.Cargo, error)
	List(opts metav1.ListOptions) (*v1.CargoList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Cargo, err error)
	CargoExpansion
}

// cargos implements CargoInterface
type cargos struct {
	client rest.Interface
}

// newCargos returns a Cargos
func newCargos(c *DevopsV1Client) *cargos {
	return &cargos{
		client: c.RESTClient(),
	}
}

// Get takes name of the cargo, and returns the corresponding cargo object, and an error if there is any.
func (c *cargos) Get(name string, options metav1.GetOptions) (result *v1.Cargo, err error) {
	result = &v1.Cargo{}
	err = c.client.Get().
		Resource("cargos").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Cargos that match those selectors.
func (c *cargos) List(opts metav1.ListOptions) (result *v1.CargoList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.CargoList{}
	err = c.client.Get().
		Resource("cargos").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested cargos.
func (c *cargos) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("cargos").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a cargo and creates it.  Returns the server's representation of the cargo, and an error, if there is any.
func (c *cargos) Create(cargo *v1.Cargo) (result *v1.Cargo, err error) {
	result = &v1.Cargo{}
	err = c.client.Post().
		Resource("cargos").
		Body(cargo).
		Do().
		Into(result)
	return
}

// Update takes the representation of a cargo and updates it. Returns the server's representation of the cargo, and an error, if there is any.
func (c *cargos) Update(cargo *v1.Cargo) (result *v1.Cargo, err error) {
	result = &v1.Cargo{}
	err = c.client.Put().
		Resource("cargos").
		Name(cargo.Name).
		Body(cargo).
		Do().
		Into(result)
	return
}

// Delete takes name of the cargo and deletes it. Returns an error if one occurs.
func (c *cargos) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Resource("cargos").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *cargos) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Resource("cargos").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched cargo.
func (c *cargos) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Cargo, err error) {
	result = &v1.Cargo{}
	err = c.client.Patch(pt).
		Resource("cargos").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
