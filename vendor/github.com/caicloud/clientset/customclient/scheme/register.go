/*
Copyright 2020 caicloud authors. All rights reserved.
*/

// Code generated by client-gen. DO NOT EDIT.

package scheme

import (
	alertingv1alpha1 "github.com/caicloud/clientset/pkg/apis/alerting/v1alpha1"
	alertingv1alpha2 "github.com/caicloud/clientset/pkg/apis/alerting/v1alpha2"
	apiregistrationv1 "github.com/caicloud/clientset/pkg/apis/apiregistration/v1"
	cleverv1alpha1 "github.com/caicloud/clientset/pkg/apis/clever/v1alpha1"
	cleverv1alpha2 "github.com/caicloud/clientset/pkg/apis/clever/v1alpha2"
	cleverv1alpha3 "github.com/caicloud/clientset/pkg/apis/clever/v1alpha3"
	cnetworkingv1alpha1 "github.com/caicloud/clientset/pkg/apis/cnetworking/v1alpha1"
	configv1alpha1 "github.com/caicloud/clientset/pkg/apis/config/v1alpha1"
	datasetv1alpha1 "github.com/caicloud/clientset/pkg/apis/dataset/v1alpha1"
	datasetv1alpha2 "github.com/caicloud/clientset/pkg/apis/dataset/v1alpha2"
	devopsv1 "github.com/caicloud/clientset/pkg/apis/devops/v1"
	evaluationv1alpha1 "github.com/caicloud/clientset/pkg/apis/evaluation/v1alpha1"
	loadbalancev1alpha2 "github.com/caicloud/clientset/pkg/apis/loadbalance/v1alpha2"
	loggingv1alpha1 "github.com/caicloud/clientset/pkg/apis/logging/v1alpha1"
	microservicev1alpha1 "github.com/caicloud/clientset/pkg/apis/microservice/v1alpha1"
	modelv1alpha1 "github.com/caicloud/clientset/pkg/apis/model/v1alpha1"
	orchestrationv1alpha1 "github.com/caicloud/clientset/pkg/apis/orchestration/v1alpha1"
	releasev1alpha1 "github.com/caicloud/clientset/pkg/apis/release/v1alpha1"
	resourcev1alpha1 "github.com/caicloud/clientset/pkg/apis/resource/v1alpha1"
	resourcev1beta1 "github.com/caicloud/clientset/pkg/apis/resource/v1beta1"
	servicemeshv1alpha1 "github.com/caicloud/clientset/pkg/apis/servicemesh/v1alpha1"
	servingv1alpha1 "github.com/caicloud/clientset/pkg/apis/serving/v1alpha1"
	tenantv1alpha1 "github.com/caicloud/clientset/pkg/apis/tenant/v1alpha1"
	workloadv1alpha1 "github.com/caicloud/clientset/pkg/apis/workload/v1alpha1"
	workloadv1beta1 "github.com/caicloud/clientset/pkg/apis/workload/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	serializer "k8s.io/apimachinery/pkg/runtime/serializer"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
)

var Scheme = runtime.NewScheme()
var Codecs = serializer.NewCodecFactory(Scheme)
var ParameterCodec = runtime.NewParameterCodec(Scheme)
var localSchemeBuilder = runtime.SchemeBuilder{
	alertingv1alpha2.AddToScheme,
	alertingv1alpha1.AddToScheme,
	apiregistrationv1.AddToScheme,
	cleverv1alpha3.AddToScheme,
	cleverv1alpha2.AddToScheme,
	cleverv1alpha1.AddToScheme,
	cnetworkingv1alpha1.AddToScheme,
	configv1alpha1.AddToScheme,
	datasetv1alpha2.AddToScheme,
	datasetv1alpha1.AddToScheme,
	devopsv1.AddToScheme,
	evaluationv1alpha1.AddToScheme,
	loadbalancev1alpha2.AddToScheme,
	loggingv1alpha1.AddToScheme,
	microservicev1alpha1.AddToScheme,
	modelv1alpha1.AddToScheme,
	orchestrationv1alpha1.AddToScheme,
	releasev1alpha1.AddToScheme,
	resourcev1beta1.AddToScheme,
	resourcev1alpha1.AddToScheme,
	servicemeshv1alpha1.AddToScheme,
	servingv1alpha1.AddToScheme,
	tenantv1alpha1.AddToScheme,
	workloadv1beta1.AddToScheme,
	workloadv1alpha1.AddToScheme,
}

// AddToScheme adds all types of this clientset into the given scheme. This allows composition
// of clientsets, like in:
//
//   import (
//     "k8s.io/client-go/kubernetes"
//     clientsetscheme "k8s.io/client-go/kubernetes/scheme"
//     aggregatorclientsetscheme "k8s.io/kube-aggregator/pkg/client/clientset_generated/clientset/scheme"
//   )
//
//   kclientset, _ := kubernetes.NewForConfig(c)
//   _ = aggregatorclientsetscheme.AddToScheme(clientsetscheme.Scheme)
//
// After this, RawExtensions in Kubernetes types will serialize kube-aggregator types
// correctly.
var AddToScheme = localSchemeBuilder.AddToScheme

func init() {
	v1.AddToGroupVersion(Scheme, schema.GroupVersion{Version: "v1"})
	utilruntime.Must(AddToScheme(Scheme))
}
