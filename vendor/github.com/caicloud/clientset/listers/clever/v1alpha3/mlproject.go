/*
Copyright 2020 caicloud authors. All rights reserved.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha3

import (
	v1alpha3 "github.com/caicloud/clientset/pkg/apis/clever/v1alpha3"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MLProjectLister helps list MLProjects.
type MLProjectLister interface {
	// List lists all MLProjects in the indexer.
	List(selector labels.Selector) (ret []*v1alpha3.MLProject, err error)
	// MLProjects returns an object that can list and get MLProjects.
	MLProjects(namespace string) MLProjectNamespaceLister
	MLProjectListerExpansion
}

// mLProjectLister implements the MLProjectLister interface.
type mLProjectLister struct {
	indexer cache.Indexer
}

// NewMLProjectLister returns a new MLProjectLister.
func NewMLProjectLister(indexer cache.Indexer) MLProjectLister {
	return &mLProjectLister{indexer: indexer}
}

// List lists all MLProjects in the indexer.
func (s *mLProjectLister) List(selector labels.Selector) (ret []*v1alpha3.MLProject, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha3.MLProject))
	})
	return ret, err
}

// MLProjects returns an object that can list and get MLProjects.
func (s *mLProjectLister) MLProjects(namespace string) MLProjectNamespaceLister {
	return mLProjectNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MLProjectNamespaceLister helps list and get MLProjects.
type MLProjectNamespaceLister interface {
	// List lists all MLProjects in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha3.MLProject, err error)
	// Get retrieves the MLProject from the indexer for a given namespace and name.
	Get(name string) (*v1alpha3.MLProject, error)
	MLProjectNamespaceListerExpansion
}

// mLProjectNamespaceLister implements the MLProjectNamespaceLister
// interface.
type mLProjectNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MLProjects in the indexer for a given namespace.
func (s mLProjectNamespaceLister) List(selector labels.Selector) (ret []*v1alpha3.MLProject, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha3.MLProject))
	})
	return ret, err
}

// Get retrieves the MLProject from the indexer for a given namespace and name.
func (s mLProjectNamespaceLister) Get(name string) (*v1alpha3.MLProject, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha3.Resource("mlproject"), name)
	}
	return obj.(*v1alpha3.MLProject), nil
}
