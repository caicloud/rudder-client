/*
Copyright 2020 caicloud authors. All rights reserved.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha3

import (
	v1alpha3 "github.com/caicloud/clientset/pkg/apis/clever/v1alpha3"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MLTaskLister helps list MLTasks.
type MLTaskLister interface {
	// List lists all MLTasks in the indexer.
	List(selector labels.Selector) (ret []*v1alpha3.MLTask, err error)
	// MLTasks returns an object that can list and get MLTasks.
	MLTasks(namespace string) MLTaskNamespaceLister
	MLTaskListerExpansion
}

// mLTaskLister implements the MLTaskLister interface.
type mLTaskLister struct {
	indexer cache.Indexer
}

// NewMLTaskLister returns a new MLTaskLister.
func NewMLTaskLister(indexer cache.Indexer) MLTaskLister {
	return &mLTaskLister{indexer: indexer}
}

// List lists all MLTasks in the indexer.
func (s *mLTaskLister) List(selector labels.Selector) (ret []*v1alpha3.MLTask, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha3.MLTask))
	})
	return ret, err
}

// MLTasks returns an object that can list and get MLTasks.
func (s *mLTaskLister) MLTasks(namespace string) MLTaskNamespaceLister {
	return mLTaskNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MLTaskNamespaceLister helps list and get MLTasks.
type MLTaskNamespaceLister interface {
	// List lists all MLTasks in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha3.MLTask, err error)
	// Get retrieves the MLTask from the indexer for a given namespace and name.
	Get(name string) (*v1alpha3.MLTask, error)
	MLTaskNamespaceListerExpansion
}

// mLTaskNamespaceLister implements the MLTaskNamespaceLister
// interface.
type mLTaskNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MLTasks in the indexer for a given namespace.
func (s mLTaskNamespaceLister) List(selector labels.Selector) (ret []*v1alpha3.MLTask, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha3.MLTask))
	})
	return ret, err
}

// Get retrieves the MLTask from the indexer for a given namespace and name.
func (s mLTaskNamespaceLister) Get(name string) (*v1alpha3.MLTask, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha3.Resource("mltask"), name)
	}
	return obj.(*v1alpha3.MLTask), nil
}
