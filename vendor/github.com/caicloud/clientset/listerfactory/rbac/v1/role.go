/*
Copyright 2018 caicloud authors. All rights reserved.
*/

// Code generated by listerfactory-gen. DO NOT EDIT.

package v1

import (
	internalinterfaces "github.com/caicloud/clientset/listerfactory/internalinterfaces"
	rbacv1 "k8s.io/api/rbac/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	kubernetes "k8s.io/client-go/kubernetes"
	v1 "k8s.io/client-go/listers/rbac/v1"
)

var _ v1.RoleLister = &roleLister{}

var _ v1.RoleNamespaceLister = &roleNamespaceLister{}

// roleLister implements the RoleLister interface.
type roleLister struct {
	client           kubernetes.Interface
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewRoleLister returns a new RoleLister.
func NewRoleLister(client kubernetes.Interface) v1.RoleLister {
	return NewFilteredRoleLister(client, nil)
}

func NewFilteredRoleLister(client kubernetes.Interface, tweakListOptions internalinterfaces.TweakListOptionsFunc) v1.RoleLister {
	return &roleLister{
		client:           client,
		tweakListOptions: tweakListOptions,
	}
}

// List lists all Roles in the indexer.
func (s *roleLister) List(selector labels.Selector) (ret []*rbacv1.Role, err error) {
	listopt := metav1.ListOptions{
		LabelSelector: selector.String(),
	}
	if s.tweakListOptions != nil {
		s.tweakListOptions(&listopt)
	}
	list, err := s.client.RbacV1().Roles(metav1.NamespaceAll).List(listopt)
	if err != nil {
		return nil, err
	}
	for i := range list.Items {
		ret = append(ret, &list.Items[i])
	}
	return ret, nil
}

// Roles returns an object that can list and get Roles.
func (s *roleLister) Roles(namespace string) v1.RoleNamespaceLister {
	return roleNamespaceLister{client: s.client, tweakListOptions: s.tweakListOptions, namespace: namespace}
}

// roleNamespaceLister implements the RoleNamespaceLister
// interface.
type roleNamespaceLister struct {
	client           kubernetes.Interface
	namespace        string
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// List lists all Roles in the indexer for a given namespace.
func (s roleNamespaceLister) List(selector labels.Selector) (ret []*rbacv1.Role, err error) {
	listopt := metav1.ListOptions{
		LabelSelector: selector.String(),
	}
	if s.tweakListOptions != nil {
		s.tweakListOptions(&listopt)
	}
	list, err := s.client.RbacV1().Roles(s.namespace).List(listopt)
	if err != nil {
		return nil, err
	}
	for i := range list.Items {
		ret = append(ret, &list.Items[i])
	}
	return ret, nil
}

// Get retrieves the Role from the indexer for a given namespace and name.
func (s roleNamespaceLister) Get(name string) (*rbacv1.Role, error) {
	return s.client.RbacV1().Roles(s.namespace).Get(name, metav1.GetOptions{})
}
