/*
Copyright 2018 caicloud authors. All rights reserved.
*/

// Code generated by listerfactory-gen. DO NOT EDIT.

package listerfactory

import (
	admissionregistration "github.com/caicloud/clientset/listerfactory/admissionregistration"
	apps "github.com/caicloud/clientset/listerfactory/apps"
	autoscaling "github.com/caicloud/clientset/listerfactory/autoscaling"
	batch "github.com/caicloud/clientset/listerfactory/batch"
	certificates "github.com/caicloud/clientset/listerfactory/certificates"
	core "github.com/caicloud/clientset/listerfactory/core"
	events "github.com/caicloud/clientset/listerfactory/events"
	extensions "github.com/caicloud/clientset/listerfactory/extensions"
	internalinterfaces "github.com/caicloud/clientset/listerfactory/internalinterfaces"
	networking "github.com/caicloud/clientset/listerfactory/networking"
	policy "github.com/caicloud/clientset/listerfactory/policy"
	rbac "github.com/caicloud/clientset/listerfactory/rbac"
	scheduling "github.com/caicloud/clientset/listerfactory/scheduling"
	settings "github.com/caicloud/clientset/listerfactory/settings"
	storage "github.com/caicloud/clientset/listerfactory/storage"
	informers "k8s.io/client-go/informers"
	kubernetes "k8s.io/client-go/kubernetes"
)

type clientListerFactory struct {
	client           kubernetes.Interface
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewListerFactoryFromClient constructs a new instance of clientListerFactory
func NewListerFactoryFromClient(client kubernetes.Interface) ListerFactory {
	return NewFilteredListerFactoryFromClient(client, nil)
}

// NewFilteredListerFactoryFromClient constructs a new instance of clientListerFactory.
// Listers obtained via this ClientListerFactory will be subject to the same filters
// as specified here.
func NewFilteredListerFactoryFromClient(client kubernetes.Interface, tweakListOptions internalinterfaces.TweakListOptionsFunc) ListerFactory {
	return &clientListerFactory{
		client:           client,
		tweakListOptions: tweakListOptions,
	}
}

type informerListerFactory struct {
	client  kubernetes.Interface
	factory informers.SharedInformerFactory
}

func NewListerFactoryFromInformer(client kubernetes.Interface, factory informers.SharedInformerFactory) ListerFactory {
	return &informerListerFactory{
		client:  client,
		factory: factory,
	}
}

// ListerFactory provides listers for resources in all known
// API group versions.
type ListerFactory interface {
	Client() kubernetes.Interface

	Admissionregistration() admissionregistration.Interface
	Apps() apps.Interface
	Autoscaling() autoscaling.Interface
	Batch() batch.Interface
	Certificates() certificates.Interface
	Core() core.Interface
	Events() events.Interface
	Extensions() extensions.Interface
	Networking() networking.Interface
	Policy() policy.Interface
	Rbac() rbac.Interface
	Scheduling() scheduling.Interface
	Settings() settings.Interface
	Storage() storage.Interface
}

func (f *clientListerFactory) Client() kubernetes.Interface {
	return f.client
}

func (f *clientListerFactory) Admissionregistration() admissionregistration.Interface {
	return admissionregistration.New(f.client, f.tweakListOptions)
}

func (f *clientListerFactory) Apps() apps.Interface {
	return apps.New(f.client, f.tweakListOptions)
}

func (f *clientListerFactory) Autoscaling() autoscaling.Interface {
	return autoscaling.New(f.client, f.tweakListOptions)
}

func (f *clientListerFactory) Batch() batch.Interface {
	return batch.New(f.client, f.tweakListOptions)
}

func (f *clientListerFactory) Certificates() certificates.Interface {
	return certificates.New(f.client, f.tweakListOptions)
}

func (f *clientListerFactory) Core() core.Interface {
	return core.New(f.client, f.tweakListOptions)
}

func (f *clientListerFactory) Events() events.Interface {
	return events.New(f.client, f.tweakListOptions)
}

func (f *clientListerFactory) Extensions() extensions.Interface {
	return extensions.New(f.client, f.tweakListOptions)
}

func (f *clientListerFactory) Networking() networking.Interface {
	return networking.New(f.client, f.tweakListOptions)
}

func (f *clientListerFactory) Policy() policy.Interface {
	return policy.New(f.client, f.tweakListOptions)
}

func (f *clientListerFactory) Rbac() rbac.Interface {
	return rbac.New(f.client, f.tweakListOptions)
}

func (f *clientListerFactory) Scheduling() scheduling.Interface {
	return scheduling.New(f.client, f.tweakListOptions)
}

func (f *clientListerFactory) Settings() settings.Interface {
	return settings.New(f.client, f.tweakListOptions)
}

func (f *clientListerFactory) Storage() storage.Interface {
	return storage.New(f.client, f.tweakListOptions)
}

func (f *informerListerFactory) Client() kubernetes.Interface {
	return f.client
}

func (f *informerListerFactory) Admissionregistration() admissionregistration.Interface {
	return admissionregistration.NewFrom(f.factory)
}

func (f *informerListerFactory) Apps() apps.Interface {
	return apps.NewFrom(f.factory)
}

func (f *informerListerFactory) Autoscaling() autoscaling.Interface {
	return autoscaling.NewFrom(f.factory)
}

func (f *informerListerFactory) Batch() batch.Interface {
	return batch.NewFrom(f.factory)
}

func (f *informerListerFactory) Certificates() certificates.Interface {
	return certificates.NewFrom(f.factory)
}

func (f *informerListerFactory) Core() core.Interface {
	return core.NewFrom(f.factory)
}

func (f *informerListerFactory) Events() events.Interface {
	return events.NewFrom(f.factory)
}

func (f *informerListerFactory) Extensions() extensions.Interface {
	return extensions.NewFrom(f.factory)
}

func (f *informerListerFactory) Networking() networking.Interface {
	return networking.NewFrom(f.factory)
}

func (f *informerListerFactory) Policy() policy.Interface {
	return policy.NewFrom(f.factory)
}

func (f *informerListerFactory) Rbac() rbac.Interface {
	return rbac.NewFrom(f.factory)
}

func (f *informerListerFactory) Scheduling() scheduling.Interface {
	return scheduling.NewFrom(f.factory)
}

func (f *informerListerFactory) Settings() settings.Interface {
	return settings.NewFrom(f.factory)
}

func (f *informerListerFactory) Storage() storage.Interface {
	return storage.NewFrom(f.factory)
}
