/*
Copyright 2019 caicloud authors. All rights reserved.
*/

// Code generated by listerfactory-gen. DO NOT EDIT.

package v1beta1

import (
	internalinterfaces "github.com/caicloud/clientset/listerfactory/internalinterfaces"
	storagev1beta1 "k8s.io/api/storage/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	kubernetes "k8s.io/client-go/kubernetes"
	v1beta1 "k8s.io/client-go/listers/storage/v1beta1"
)

var _ v1beta1.CSINodeLister = &cSINodeLister{}

// cSINodeLister implements the CSINodeLister interface.
type cSINodeLister struct {
	client           kubernetes.Interface
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewCSINodeLister returns a new CSINodeLister.
func NewCSINodeLister(client kubernetes.Interface) v1beta1.CSINodeLister {
	return NewFilteredCSINodeLister(client, nil)
}

func NewFilteredCSINodeLister(client kubernetes.Interface, tweakListOptions internalinterfaces.TweakListOptionsFunc) v1beta1.CSINodeLister {
	return &cSINodeLister{
		client:           client,
		tweakListOptions: tweakListOptions,
	}
}

// List lists all CSINodes in the indexer.
func (s *cSINodeLister) List(selector labels.Selector) (ret []*storagev1beta1.CSINode, err error) {
	listopt := v1.ListOptions{
		LabelSelector: selector.String(),
	}
	if s.tweakListOptions != nil {
		s.tweakListOptions(&listopt)
	}
	list, err := s.client.StorageV1beta1().CSINodes().List(listopt)
	if err != nil {
		return nil, err
	}
	for i := range list.Items {
		ret = append(ret, &list.Items[i])
	}
	return ret, nil
}

// Get retrieves the CSINode from the index for a given name.
func (s *cSINodeLister) Get(name string) (*storagev1beta1.CSINode, error) {
	return s.client.StorageV1beta1().CSINodes().Get(name, v1.GetOptions{})
}
